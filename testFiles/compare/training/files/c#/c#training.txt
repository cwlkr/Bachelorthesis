//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotNetOpenAuth.OAuth2 {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class AuthServerStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AuthServerStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DotNetOpenAuth.OAuth2.AuthServerStrings", typeof(AuthServerStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested access scope exceeds the grant scope..
        /// </summary>
        internal static string AccessScopeExceedsGrantScope {
            get {
                return ResourceManager.GetString("AccessScopeExceedsGrantScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The access token&apos;s private signing key must be set..
        /// </summary>
        internal static string AccessTokenSigningKeyMissing {
            get {
                return ResourceManager.GetString("AccessTokenSigningKeyMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback URL ({0}) is not allowed for this client..
        /// </summary>
        internal static string ClientCallbackDisallowed {
            get {
                return ResourceManager.GetString("ClientCallbackDisallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failure looking up secret for client or token..
        /// </summary>
        internal static string ClientOrTokenSecretNotFound {
            get {
                return ResourceManager.GetString("ClientOrTokenSecretNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client secret was incorrect..
        /// </summary>
        internal static string ClientSecretMismatch {
            get {
                return ResourceManager.GetString("ClientSecretMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid resource owner password credential..
        /// </summary>
        internal static string InvalidResourceOwnerPasswordCredential {
            get {
                return ResourceManager.GetString("InvalidResourceOwnerPasswordCredential", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No callback URI was available for this request..
        /// </summary>
        internal static string NoCallback {
            get {
                return ResourceManager.GetString("NoCallback", resourceCulture);
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotNetOpenAuth.OAuth2 {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class AuthServerStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AuthServerStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DotNetOpenAuth.OAuth2.AuthServerStrings", typeof(AuthServerStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested access scope exceeds the grant scope..
        /// </summary>
        internal static string AccessScopeExceedsGrantScope {
            get {
                return ResourceManager.GetString("AccessScopeExceedsGrantScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The access token&apos;s private signing key must be set..
        /// </summary>
        internal static string AccessTokenSigningKeyMissing {
            get {
                return ResourceManager.GetString("AccessTokenSigningKeyMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback URL ({0}) is not allowed for this client..
        /// </summary>
        internal static string ClientCallbackDisallowed {
            get {
                return ResourceManager.GetString("ClientCallbackDisallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failure looking up secret for client or token..
        /// </summary>
        internal static string ClientOrTokenSecretNotFound {
            get {
                return ResourceManager.GetString("ClientOrTokenSecretNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client secret was incorrect..
        /// </summary>
        internal static string ClientSecretMismatch {
            get {
                return ResourceManager.GetString("ClientSecretMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid resource owner password credential..
        /// </summary>
        internal static string InvalidResourceOwnerPasswordCredential {
            get {
                return ResourceManager.GetString("InvalidResourceOwnerPasswordCredential", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No callback URI was available for this request..
        /// </summary>
        internal static string NoCallback {
            get {
                return ResourceManager.GetString("NoCallback", resourceCulture);
            }
        }
    }
}
//-----------------------------------------------------------------------
// <copyright file="ClientDescription.cs" company="Outercurve Foundation">
//     Copyright (c) Outercurve Foundation. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace DotNetOpenAuth.OAuth2 {
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using DotNetOpenAuth.Messaging;
	using Validation;

	/// <summary>
	/// A default implementation of the <see cref="IClientDescription"/> interface.
	/// </summary>
	public class ClientDescription : IClientDescription {
		/// <summary>
		/// The client's secret, if any.
		/// </summary>
		private readonly string secret;

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientDescription"/> class
		/// to represent a confidential client (one that has an authenticating secret.)
		/// </summary>
		/// <param name="secret">The secret.</param>
		/// <param name="defaultCallback">The default callback.</param>
		public ClientDescription(string secret, Uri defaultCallback) {
			Requires.NotNullOrEmpty(secret, "secret");
			Requires.NotNull(defaultCallback, "defaultCallback");

			this.secret = secret;
			this.DefaultCallback = defaultCallback;
			this.ClientType = ClientType.Confidential;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientDescription"/> class
		/// to represent a public client (one that does not have an authenticating secret.)
		/// </summary>
		/// <param name="defaultCallback">The default callback.</param>
		public ClientDescription(Uri defaultCallback) {
			Requires.NotNull(defaultCallback, "defaultCallback");

			this.DefaultCallback = defaultCallback;
			this.ClientType = ClientType.Public;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientDescription"/> class.
		/// </summary>
		protected ClientDescription() {
		}

		#region IClientDescription Members

		/// <summary>
		/// Gets or sets the callback to use when an individual authorization request
		/// does not include an explicit callback URI.
		/// </summary>
		/// <value>
		/// An absolute URL; or <c>null</c> if none is registered.
		/// </value>
		public Uri DefaultCallback { get; protected set; }

		/// <summary>
		/// Gets or sets the type of the client.
		/// </summary>
		public ClientType ClientType { get; protected set; }

		/// <summary>
		/// Gets a value indicating whether a non-empty secret is registered for this client.
		/// </summary>
		public virtual bool HasNonEmptySecret {
			get { return !string.IsNullOrEmpty(this.secret); }
		}

		/// <summary>
		/// Determines whether a callback URI included in a client's authorization request
		/// is among those allowed callbacks for the registered client.
		/// </summary>
		/// <param name="callback">The absolute URI the client has requested the authorization result be received at.  Never null.</param>
		/// <returns>
		///   <c>true</c> if the callback URL is allowable for this client; otherwise, <c>false</c>.
		/// </returns>
		/// <remarks>
		/// This method may be overridden to allow for several callbacks to match.
		/// </remarks>
		public virtual bool IsCallbackAllowed(Uri callback) {
			return EqualityComparer<Uri>.Default.Equals(this.DefaultCallback, callback);
		}

		/// <summary>
		/// Checks whether the specified client secret is correct.
		/// </summary>
		/// <param name="secret">The secret obtained from the client.</param>
		/// <returns><c>true</c> if the secret matches the one in the authorization server's record for the client; <c>false</c> otherwise.</returns>
		/// <remarks>
		/// All string equality checks, whether checking secrets or their hashes,
		/// should be done using <see cref="MessagingUtilities.EqualsConstantTime"/> to mitigate timing attacks.
		/// </remarks>
		public virtual bool IsValidClientSecret(string secret) {
			Requires.NotNullOrEmpty(secret, "secret");

			return MessagingUtilities.EqualsConstantTime(secret, this.secret);
		}

		#endregion
	}
}