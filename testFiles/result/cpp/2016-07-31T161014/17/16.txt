/ * * * it under the terms of the GNU General Public License as published by * * * You should have received a copy of the GNU General Public License * / Application & app , QWidget * parent ) : QDialog ( parent ) , mApplication ( app ) { setWindowTitle ( title ) ; adjustSize ( ) ; } ApplicationDialog : : ~ ApplicationDialog ( ) { / / dtor } void ApplicationDialog : : Browse ( ) { QString filter ; tr ( " Select viewer application " ) , filter ) ; } } void ApplicationDialog : : Ok ( ) { tr ( " Cppcheck " ) , QMessageBox : : Ok , this ) ; msg . exec ( ) ; reject ( ) ; accept ( ) ; } } / * * * it under the terms of the GNU General Public License as published by * * * You should have received a copy of the GNU General Public License * / Application & app , QWidget * parent ) : QDialog ( parent ) , mApplication ( app ) { setWindowTitle ( title ) ; adjustSize ( ) ; } ApplicationDialog : : ~ ApplicationDialog ( ) { / / dtor } void ApplicationDialog : : Browse ( ) { QString filter ; tr ( " Select viewer application " ) , filter ) ; } } void ApplicationDialog : : Ok ( ) { tr ( " Cppcheck " ) , QMessageBox : : Ok , this ) ; msg . exec ( ) ; reject ( ) ; accept ( ) ; } } / * * * it under the terms of the GNU General Public License as published by * * * You should have received a copy of the GNU General Public License * / / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - / / CWE ids used static const struct CWE CWE398 ( 398U ) ; / / Indicator of Poor Code Quality namespace { Check64BitPortability instance ; } void Check64BitPortability : : pointerassignment ( ) { return ; / / Check return values continue ; bool retPointer = false ; retPointer = true ; ; continue ; / / skip nested functions } continue ; continue ; if ( ! returnType ) continue ; returnIntegerError ( tok ) ; returnPointerError ( tok ) ; } } / / Check assignments continue ; continue ; assignmentIntegerToAddressError ( tok ) ; assignmentAddressToIntegerError ( tok ) ; } } } { } { } { } { } 