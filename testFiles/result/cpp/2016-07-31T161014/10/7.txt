* Cppcheck - A tool for static C / C + + code analysis * Copyright ( C ) 2007 - 2016 Cppcheck team . * This program is free software : you can redistribute it and / or modify * the Free Software Foundation , either version 3 of the License , or * ( at your option ) any later version . * This program is distributed in the hope that it will be useful , * but WITHOUT ANY WARRANTY ; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the * GNU General Public License for more details . * along with this program . If not , see < http : / / www . gnu . org / licenses / > . # include < QString > # include < QWidget > # include < QDialog > # include < QFileDialog > # include < QMessageBox > # include " applicationdialog . h " # include " application . h " # include " common . h " # ifdef Q _ OS _ WIN / / In Windows ( almost ) all executables have . exe extension / / so it does not make sense to show everything . # endif / / Q _ OS _ WIN } else { / / Convert possible native ( Windows ) path to internal presentation format * Cppcheck - A tool for static C / C + + code analysis * Copyright ( C ) 2007 - 2016 Cppcheck team . * This program is free software : you can redistribute it and / or modify * the Free Software Foundation , either version 3 of the License , or * ( at your option ) any later version . * This program is distributed in the hope that it will be useful , * but WITHOUT ANY WARRANTY ; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the * GNU General Public License for more details . * along with this program . If not , see < http : / / www . gnu . org / licenses / > . # include < QString > # include < QWidget > # include < QDialog > # include < QFileDialog > # include < QMessageBox > # include " applicationdialog . h " # include " application . h " # include " common . h " # ifdef Q _ OS _ WIN / / In Windows ( almost ) all executables have . exe extension / / so it does not make sense to show everything . # endif / / Q _ OS _ WIN } else { / / Convert possible native ( Windows ) path to internal presentation format * Cppcheck - A tool for static C / C + + code analysis * Copyright ( C ) 2007 - 2016 Cppcheck team . * This program is free software : you can redistribute it and / or modify * the Free Software Foundation , either version 3 of the License , or * ( at your option ) any later version . * This program is distributed in the hope that it will be useful , * but WITHOUT ANY WARRANTY ; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the * GNU General Public License for more details . * along with this program . If not , see < http : / / www . gnu . org / licenses / > . / / 64 - bit portability # include " check64bit . h " # include " symboldatabase . h " / / Register this check class ( by creating a static instance of it ) / / Assign integer to pointer . . ! tok - > astOperand2 ( ) - > isNumber ( ) & & / / Assign pointer to integer . . " AssignmentAddressToInteger " , " Assigning a pointer to an integer is not portable . \ n " " Assigning a pointer to an integer ( int / long / etc ) is not portable across different platforms and " " compilers . For example in 32 - bit Windows and linux they are same width , but in 64 - bit Windows and linux " " they are of different width . In worst case you end up assigning 64 - bit address to 32 - bit integer . The safe " " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; " AssignmentIntegerToAddress " , " Assigning an integer to a pointer is not portable . \ n " " Assigning an integer ( int / long / etc ) to a pointer is not portable across different platforms and " " compilers . For example in 32 - bit Windows and linux they are same width , but in 64 - bit Windows and linux " " they are of different width . In worst case you end up assigning 64 - bit integer to 32 - bit pointer . The safe " " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; " CastAddressToIntegerAtReturn " , " Returning an address value in a function with integer return type is not portable . \ n " " Returning an address value in a function with integer ( int / long / etc ) return type is not portable across " " different platforms and compilers . For example in 32 - bit Windows and Linux they are same width , but in " " 64 - bit Windows and Linux they are of different width . In worst case you end up casting 64 - bit address down " " CastIntegerToAddressAtReturn " , " Returning an integer in a function with pointer return type is not portable . \ n " " Returning an integer ( int / long / etc ) in a function with pointer return type is not portable across different " " platforms and compilers . For example in 32 - bit Windows and Linux they are same width , but in 64 - bit Windows " " and Linux they are of different width . In worst case you end up casting 64 - bit integer down to 32 - bit pointer . " " The safe way is to always return a pointer . " , CWE758 , false ) ; 