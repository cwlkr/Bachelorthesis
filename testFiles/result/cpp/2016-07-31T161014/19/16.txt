* Cppcheck - A tool for static C / C + + code analysis * the Free Software Foundation , either version 3 of the License , or * along with this program . If not , see < http : / / www . gnu . org / licenses / > . # include " applicationdialog . h " # include " application . h " # include " common . h " / / In Windows ( almost ) all executables have . exe extension # endif / / Q _ OS _ WIN * Cppcheck - A tool for static C / C + + code analysis * the Free Software Foundation , either version 3 of the License , or * along with this program . If not , see < http : / / www . gnu . org / licenses / > . # include " applicationdialog . h " # include " application . h " # include " common . h " / / In Windows ( almost ) all executables have . exe extension # endif / / Q _ OS _ WIN * Cppcheck - A tool for static C / C + + code analysis * the Free Software Foundation , either version 3 of the License , or * along with this program . If not , see < http : / / www . gnu . org / licenses / > . # include " check64bit . h " # include " symboldatabase . h " ! tok - > astOperand2 ( ) - > isNumber ( ) & & " Assigning a pointer to an integer ( int / long / etc ) is not portable across different platforms and " " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; " Assigning an integer ( int / long / etc ) to a pointer is not portable across different platforms and " " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; " Returning an address value in a function with integer ( int / long / etc ) return type is not portable across " " Returning an integer ( int / long / etc ) in a function with pointer return type is not portable across different " " The safe way is to always return a pointer . " , CWE758 , false ) ; 