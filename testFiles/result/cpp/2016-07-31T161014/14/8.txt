* This program is free software : you can redistribute it and / or modify * ( at your option ) any later version . * This program is distributed in the hope that it will be useful , * but WITHOUT ANY WARRANTY ; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the * GNU General Public License for more details . # include < QString > # include < QWidget > # include < QDialog > # include < QFileDialog > # include < QMessageBox > # ifdef Q _ OS _ WIN / / so it does not make sense to show everything . } else { / / Convert possible native ( Windows ) path to internal presentation format * This program is free software : you can redistribute it and / or modify * ( at your option ) any later version . * This program is distributed in the hope that it will be useful , * but WITHOUT ANY WARRANTY ; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the * GNU General Public License for more details . # include < QString > # include < QWidget > # include < QDialog > # include < QFileDialog > # include < QMessageBox > # ifdef Q _ OS _ WIN / / so it does not make sense to show everything . } else { / / Convert possible native ( Windows ) path to internal presentation format * This program is free software : you can redistribute it and / or modify * ( at your option ) any later version . * This program is distributed in the hope that it will be useful , * but WITHOUT ANY WARRANTY ; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the * GNU General Public License for more details . / / 64 - bit portability / / Register this check class ( by creating a static instance of it ) / / Assign integer to pointer . . / / Assign pointer to integer . . " AssignmentAddressToInteger " , " Assigning a pointer to an integer is not portable . \ n " " AssignmentIntegerToAddress " , " Assigning an integer to a pointer is not portable . \ n " " CastAddressToIntegerAtReturn " , " Returning an address value in a function with integer return type is not portable . \ n " " CastIntegerToAddressAtReturn " , " Returning an integer in a function with pointer return type is not portable . \ n " 