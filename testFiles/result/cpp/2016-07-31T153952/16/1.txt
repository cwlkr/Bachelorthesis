* Cppcheck - A tool for static C / C + + code analysis * along with this program . If not , see < http : / / www . gnu . org / licenses / > . * Cppcheck - A tool for static C / C + + code analysis * along with this program . If not , see < http : / / www . gnu . org / licenses / > . * Cppcheck - A tool for static C / C + + code analysis * along with this program . If not , see < http : / / www . gnu . org / licenses / > . static const struct CWE CWE398 ( 398U ) ; / / Indicator of Poor Code Quality static const struct CWE CWE758 ( 758U ) ; / / Reliance on Undefined , Unspecified , or Implementation - Defined Behavior const std : : size _ t functions = symbolDatabase - > functionScopes . size ( ) ; const ValueType * const returnType = tok - > astOperand1 ( ) - > valueType ( ) ; void Check64BitPortability : : assignmentAddressToIntegerError ( const Token * tok ) " Assigning a pointer to an integer is not portable . \ n " void Check64BitPortability : : assignmentIntegerToAddressError ( const Token * tok ) " Assigning an integer to a pointer is not portable . \ n " void Check64BitPortability : : returnPointerError ( const Token * tok ) " Returning an address value in a function with integer ( int / long / etc ) return type is not portable across " " different platforms and compilers . For example in 32 - bit Windows and Linux they are same width , but in " " to 32 - bit integer . The safe way is to always return an integer . " , CWE758 , false ) ; void Check64BitPortability : : returnIntegerError ( const Token * tok ) " and Linux they are of different width . In worst case you end up casting 64 - bit integer down to 32 - bit pointer . " " The safe way is to always return a pointer . " , CWE758 , false ) ; 