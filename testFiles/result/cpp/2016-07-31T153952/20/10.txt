/ * * * This program is free software : you can redistribute it and / or modify * it under the terms of the GNU General Public License as published by * * This program is distributed in the hope that it will be useful , * * You should have received a copy of the GNU General Public License * / { } { / / dtor } { / / so it does not make sense to show everything . } } { } } / * * * This program is free software : you can redistribute it and / or modify * it under the terms of the GNU General Public License as published by * * This program is distributed in the hope that it will be useful , * * You should have received a copy of the GNU General Public License * / { } { / / dtor } { / / so it does not make sense to show everything . } } { } } / * * * This program is free software : you can redistribute it and / or modify * it under the terms of the GNU General Public License as published by * * This program is distributed in the hope that it will be useful , * * You should have received a copy of the GNU General Public License * / / / CWE ids used / / Register this check class ( by creating a static instance of it ) } { / / Check return values ; / / skip nested functions } } } / / Check assignments / / Assign integer to pointer . . / / Assign pointer to integer . . } } } { " Assigning a pointer to an integer is not portable . \ n " " Assigning a pointer to an integer ( int / long / etc ) is not portable across different platforms and " " they are of different width . In worst case you end up assigning 64 - bit address to 32 - bit integer . The safe " } { " Assigning an integer to a pointer is not portable . \ n " " they are of different width . In worst case you end up assigning 64 - bit integer to 32 - bit pointer . The safe " } { " Returning an address value in a function with integer return type is not portable . \ n " " Returning an address value in a function with integer ( int / long / etc ) return type is not portable across " } { " Returning an integer in a function with pointer return type is not portable . \ n " " The safe way is to always return a pointer . " , CWE758 , false ) ; } 