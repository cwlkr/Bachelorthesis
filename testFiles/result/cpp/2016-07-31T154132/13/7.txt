connect ( mUI . mButtonBrowse , SIGNAL ( clicked ( ) ) , this , SLOT ( Browse ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( accepted ( ) ) , this , SLOT ( Ok ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( rejected ( ) ) , this , SLOT ( reject ( ) ) ) ; mUI . mPath - > setText ( app . getPath ( ) ) ; mUI . mName - > setText ( app . getName ( ) ) ; mUI . mParameters - > setText ( app . getParameters ( ) ) ; SetPath ( SETTINGS _ LAST _ APP _ PATH , selectedFile ) ; if ( mUI . mName - > text ( ) . isEmpty ( ) | | mUI . mPath - > text ( ) . isEmpty ( ) ) { mApplication . setName ( mUI . mName - > text ( ) ) ; mApplication . setPath ( QDir : : fromNativeSeparators ( mUI . mPath - > text ( ) ) ) ; mApplication . setParameters ( mUI . mParameters - > text ( ) ) ; connect ( mUI . mButtonBrowse , SIGNAL ( clicked ( ) ) , this , SLOT ( Browse ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( accepted ( ) ) , this , SLOT ( Ok ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( rejected ( ) ) , this , SLOT ( reject ( ) ) ) ; mUI . mPath - > setText ( app . getPath ( ) ) ; mUI . mName - > setText ( app . getName ( ) ) ; mUI . mParameters - > setText ( app . getParameters ( ) ) ; SetPath ( SETTINGS _ LAST _ APP _ PATH , selectedFile ) ; if ( mUI . mName - > text ( ) . isEmpty ( ) | | mUI . mPath - > text ( ) . isEmpty ( ) ) { mApplication . setName ( mUI . mName - > text ( ) ) ; mApplication . setPath ( QDir : : fromNativeSeparators ( mUI . mPath - > text ( ) ) ) ; mApplication . setParameters ( mUI . mParameters - > text ( ) ) ; if ( ! _ settings - > isEnabled ( " portability " ) ) for ( std : : size _ t i = 0 ; i < functions ; + + i ) { if ( scope - > function = = 0 | | ! scope - > function - > hasBody ( ) ) / / We only look for functions with a body if ( scope - > function - > token - > strAt ( - 1 ) = = " * " ) / / Function returns a pointer for ( const Token * tok = scope - > classStart - > next ( ) ; tok ! = scope - > classEnd ; tok = tok - > next ( ) ) { if ( tok - > str ( ) = = " { " ) { if ( tok - > scope ( ) - > type = = Scope : : ScopeType : : eFunction | | tok - > scope ( ) - > type = = Scope : : ScopeType : : eLambda ) if ( tok - > str ( ) ! = " return " ) if ( retPointer & & returnType - > pointer = = 0U ) for ( std : : size _ t i = 0 ; i < functions ; + + i ) { for ( const Token * tok = scope - > classStart ; tok & & tok ! = scope - > classEnd ; tok = tok - > next ( ) ) { if ( tok - > str ( ) ! = " = " ) 