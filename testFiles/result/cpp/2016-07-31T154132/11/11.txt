/ * * ( at your option ) any later version . * / / / dtor / / In Windows ( almost ) all executables have . exe extension / / so it does not make sense to show everything . / / Convert possible native ( Windows ) path to internal presentation format / * * ( at your option ) any later version . * / / / dtor / / In Windows ( almost ) all executables have . exe extension / / so it does not make sense to show everything . / / Convert possible native ( Windows ) path to internal presentation format / * * ( at your option ) any later version . * / / / 64 - bit portability / / CWE ids used / / Register this check class ( by creating a static instance of it ) / / Check return values / / skip nested functions / / Check assignments / / Assign integer to pointer . . / / Assign pointer to integer . . " Assigning a pointer to an integer is not portable . \ n " " Assigning a pointer to an integer ( int / long / etc ) is not portable across different platforms and " " they are of different width . In worst case you end up assigning 64 - bit address to 32 - bit integer . The safe " " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; " Assigning an integer to a pointer is not portable . \ n " " they are of different width . In worst case you end up assigning 64 - bit integer to 32 - bit pointer . The safe " " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; " Returning an address value in a function with integer return type is not portable . \ n " " Returning an address value in a function with integer ( int / long / etc ) return type is not portable across " " different platforms and compilers . For example in 32 - bit Windows and Linux they are same width , but in " " 64 - bit Windows and Linux they are of different width . In worst case you end up casting 64 - bit address down " " to 32 - bit integer . The safe way is to always return an integer . " , CWE758 , false ) ; " Returning an integer in a function with pointer return type is not portable . \ n " " platforms and compilers . For example in 32 - bit Windows and Linux they are same width , but in 64 - bit Windows " " and Linux they are of different width . In worst case you end up casting 64 - bit integer down to 32 - bit pointer . " " The safe way is to always return a pointer . " , CWE758 , false ) ; 