* along with this program . If not , see < http : / / www . gnu . org / licenses / > . connect ( mUI . mButtonBrowse , SIGNAL ( clicked ( ) ) , this , SLOT ( Browse ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( accepted ( ) ) , this , SLOT ( Ok ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( rejected ( ) ) , this , SLOT ( reject ( ) ) ) ; filter + = tr ( " Executable files ( * . exe ) ; ; All files ( * . * ) " ) ; if ( mUI . mName - > text ( ) . isEmpty ( ) | | mUI . mPath - > text ( ) . isEmpty ( ) ) { tr ( " You must specify a name , a path and optionally parameters for the application ! " ) , * along with this program . If not , see < http : / / www . gnu . org / licenses / > . connect ( mUI . mButtonBrowse , SIGNAL ( clicked ( ) ) , this , SLOT ( Browse ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( accepted ( ) ) , this , SLOT ( Ok ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( rejected ( ) ) , this , SLOT ( reject ( ) ) ) ; filter + = tr ( " Executable files ( * . exe ) ; ; All files ( * . * ) " ) ; if ( mUI . mName - > text ( ) . isEmpty ( ) | | mUI . mPath - > text ( ) . isEmpty ( ) ) { tr ( " You must specify a name , a path and optionally parameters for the application ! " ) , * along with this program . If not , see < http : / / www . gnu . org / licenses / > . if ( scope - > function = = 0 | | ! scope - > function - > hasBody ( ) ) / / We only look for functions with a body if ( scope - > function - > token - > strAt ( - 1 ) = = " * " ) / / Function returns a pointer else if ( Token : : Match ( scope - > function - > token - > previous ( ) , " int | long | DWORD " ) ) / / Function returns an integer for ( const Token * tok = scope - > classStart - > next ( ) ; tok ! = scope - > classEnd ; tok = tok - > next ( ) ) { if ( tok - > scope ( ) - > type = = Scope : : ScopeType : : eFunction | | tok - > scope ( ) - > type = = Scope : : ScopeType : : eLambda ) if ( ! tok - > astOperand1 ( ) | | tok - > astOperand1 ( ) - > isNumber ( ) ) for ( const Token * tok = scope - > classStart ; tok & & tok ! = scope - > classEnd ; tok = tok - > next ( ) ) { const ValueType * lhstype = tok - > astOperand1 ( ) ? tok - > astOperand1 ( ) - > valueType ( ) : nullptr ; const ValueType * rhstype = tok - > astOperand2 ( ) ? tok - > astOperand2 ( ) - > valueType ( ) : nullptr ; " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; 