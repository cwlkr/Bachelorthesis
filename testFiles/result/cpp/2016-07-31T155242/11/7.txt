* * it under the terms of the GNU General Public License as published by * * This program is distributed in the hope that it will be useful , * * You should have received a copy of the GNU General Public License { } { / / dtor } { / / so it does not make sense to show everything . } } { } else { / / Convert possible native ( Windows ) path to internal presentation format } } * * it under the terms of the GNU General Public License as published by * * This program is distributed in the hope that it will be useful , * * You should have received a copy of the GNU General Public License { } { / / dtor } { / / so it does not make sense to show everything . } } { } else { / / Convert possible native ( Windows ) path to internal presentation format } } * * it under the terms of the GNU General Public License as published by * * This program is distributed in the hope that it will be useful , * * You should have received a copy of the GNU General Public License / / CWE ids used } { / / Check return values ; / / skip nested functions } } } / / Check assignments } } } { " AssignmentAddressToInteger " , " Assigning a pointer to an integer is not portable . \ n " " they are of different width . In worst case you end up assigning 64 - bit address to 32 - bit integer . The safe " " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; } { " AssignmentIntegerToAddress " , " Assigning an integer to a pointer is not portable . \ n " " they are of different width . In worst case you end up assigning 64 - bit integer to 32 - bit pointer . The safe " " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; } { " CastAddressToIntegerAtReturn " , " Returning an address value in a function with integer return type is not portable . \ n " " Returning an address value in a function with integer ( int / long / etc ) return type is not portable across " " to 32 - bit integer . The safe way is to always return an integer . " , CWE758 , false ) ; } { " CastIntegerToAddressAtReturn " , " Returning an integer in a function with pointer return type is not portable . \ n " " platforms and compilers . For example in 32 - bit Windows and Linux they are same width , but in 64 - bit Windows " " The safe way is to always return a pointer . " , CWE758 , false ) ; } 