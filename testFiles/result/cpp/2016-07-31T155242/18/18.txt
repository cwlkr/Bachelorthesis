connect ( mUI . mButtonBrowse , SIGNAL ( clicked ( ) ) , this , SLOT ( Browse ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( accepted ( ) ) , this , SLOT ( Ok ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( rejected ( ) ) , this , SLOT ( reject ( ) ) ) ; if ( mUI . mName - > text ( ) . isEmpty ( ) | | mUI . mPath - > text ( ) . isEmpty ( ) ) { connect ( mUI . mButtonBrowse , SIGNAL ( clicked ( ) ) , this , SLOT ( Browse ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( accepted ( ) ) , this , SLOT ( Ok ( ) ) ) ; connect ( mUI . mButtons , SIGNAL ( rejected ( ) ) , this , SLOT ( reject ( ) ) ) ; if ( mUI . mName - > text ( ) . isEmpty ( ) | | mUI . mPath - > text ( ) . isEmpty ( ) ) { for ( std : : size _ t i = 0 ; i < functions ; + + i ) { if ( scope - > function = = 0 | | ! scope - > function - > hasBody ( ) ) / / We only look for functions with a body if ( tok - > scope ( ) - > type = = Scope : : ScopeType : : eFunction | | tok - > scope ( ) - > type = = Scope : : ScopeType : : eLambda ) for ( std : : size _ t i = 0 ; i < functions ; + + i ) { " Returning an address value in a function with integer ( int / long / etc ) return type is not portable across " " The safe way is to always return a pointer . " , CWE758 , false ) ; 