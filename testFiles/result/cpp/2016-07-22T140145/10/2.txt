* * This program is free software : you can redistribute it and / or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation , either version 3 of the License , or * * This program is distributed in the hope that it will be useful , * but WITHOUT ANY WARRANTY ; without even the implied warranty of * * You should have received a copy of the GNU General Public License { } { } { # ifdef Q _ OS _ WIN } } { } } * * This program is free software : you can redistribute it and / or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation , either version 3 of the License , or * * This program is distributed in the hope that it will be useful , * but WITHOUT ANY WARRANTY ; without even the implied warranty of * * You should have received a copy of the GNU General Public License { } { } { # ifdef Q _ OS _ WIN } } { } } * * This program is free software : you can redistribute it and / or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation , either version 3 of the License , or * * This program is distributed in the hope that it will be useful , * but WITHOUT ANY WARRANTY ; without even the implied warranty of * * You should have received a copy of the GNU General Public License } { ; else } } } } } } { " Assigning a pointer to an integer is not portable . \ n " " Assigning a pointer to an integer ( int / long / etc ) is not portable across different platforms and " " they are of different width . In worst case you end up assigning 64 - bit address to 32 - bit integer . The safe " " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; } { " Assigning an integer to a pointer is not portable . \ n " " they are of different width . In worst case you end up assigning 64 - bit integer to 32 - bit pointer . The safe " " way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ; } { " Returning an address value in a function with integer return type is not portable . \ n " " Returning an address value in a function with integer ( int / long / etc ) return type is not portable across " " different platforms and compilers . For example in 32 - bit Windows and Linux they are same width , but in " } { " Returning an integer in a function with pointer return type is not portable . \ n " " platforms and compilers . For example in 32 - bit Windows and Linux they are same width , but in 64 - bit Windows " " The safe way is to always return a pointer . " , CWE758 , false ) ; } 