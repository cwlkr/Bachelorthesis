* Cppcheck - A tool for static C / C + + code analysis * Copyright ( C ) 2007 - 2016 Cppcheck team . # include < QString > # include < QWidget > # include < QDialog > # include < QFileDialog > # include < QMessageBox > # include " applicationdialog . h " # include " application . h " # include " common . h " ApplicationDialog : : ApplicationDialog ( const QString & title , / / In Windows ( almost ) all executables have . exe extension QString selectedFile = QFileDialog : : getOpenFileName ( this , tr ( " Select viewer application " ) , if ( ! selectedFile . isEmpty ( ) ) { QMessageBox msg ( QMessageBox : : Warning , tr ( " Cppcheck " ) , QMessageBox : : Ok , * Cppcheck - A tool for static C / C + + code analysis * Copyright ( C ) 2007 - 2016 Cppcheck team . # include < QString > # include < QWidget > # include < QDialog > # include < QFileDialog > # include < QMessageBox > # include " applicationdialog . h " # include " application . h " # include " common . h " ApplicationDialog : : ApplicationDialog ( const QString & title , / / In Windows ( almost ) all executables have . exe extension QString selectedFile = QFileDialog : : getOpenFileName ( this , tr ( " Select viewer application " ) , if ( ! selectedFile . isEmpty ( ) ) { QMessageBox msg ( QMessageBox : : Warning , tr ( " Cppcheck " ) , QMessageBox : : Ok , * Cppcheck - A tool for static C / C + + code analysis * Copyright ( C ) 2007 - 2016 Cppcheck team . # include " check64bit . h " # include " symboldatabase . h " const Scope * scope = symbolDatabase - > functionScopes [ i ] ; if ( ! returnType ) const Scope * scope = symbolDatabase - > functionScopes [ i ] ; if ( ! lhstype | | ! rhstype ) rhstype - > pointer = = 0U & & rhstype - > originalTypeName . empty ( ) & & lhstype - > pointer = = 0U & & lhstype - > originalTypeName . empty ( ) & & " compilers . For example in 32 - bit Windows and linux they are same width , but in 64 - bit Windows and linux " " Assigning an integer ( int / long / etc ) to a pointer is not portable across different platforms and " " compilers . For example in 32 - bit Windows and linux they are same width , but in 64 - bit Windows and linux " " Returning an integer ( int / long / etc ) in a function with pointer return type is not portable across different " 