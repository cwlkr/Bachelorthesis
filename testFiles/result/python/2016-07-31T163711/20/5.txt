if card . readertype = = card . READER _ PCSC : print ' ' + card . ISO7816ErrorCodes [ card . errorcode ] print ' Read error : ' , card . ISO7816ErrorCodes [ card . errorcode ] raw _ input ( ' Remove source tag and hit < CR > to continue . . . ' ) raw _ input ( ' Invalid tag type ! Hit < CR > to continue . . . ' ) raw _ input ( ' Tag not readable ! Hit < CR > to continue . . . ' ) if len ( card . data ) ! = len ( buffer [ 0 ] ) : raw _ input ( ' Hit < CR > to continue . . . ' ) if not card . writeblock ( n , buffer [ n ] ) : print ' Station : \ t ' + card . station ( ) print ' Protocol : \ t ' + card . PCON ( ) print ' Protocol2 : \ t ' + card . PCON2 ( ) print ' Protocol3 : \ t ' + card . PCON3 ( ) card . FDXBIDPrint ( args [ 0 ] [ 1 : ] ) if card . readertype = = card . READER _ ACG : if card . readertype = = card . READER _ ACG : # carrier 32 ( 2 * 15 + 2 ) for x in range ( 0 , len ( out ) , 8 ) : for x in range ( 0 , len ( outbin ) , 4 ) : print ' Q5 Data Block % 02d : ' % ( x / 4 + 1 ) , print ' Hitag2 Data Block % 02d : ' % ( x + 3 ) , print ' Writing to tag type : ' + card . LFXTags [ card . tagtype ] if card . readertype = = card . READER _ ACG : card . login ( ' ' , ' ' , card . HITAG2 _ TRANSPORT _ RWD ) for x in range ( 4 + offset , - 1 + offset , - 1 ) : if not card . writeblock ( x , outhex [ x - offset ] ) : print ' Control : ' + outhex [ x - offset ] if card . readertype = = card . READER _ FROSCH : print card . FROSCH _ Errors [ card . errorcode ] print ' Control : ' + outhex [ x - offset ] if card . readertype = = card . READER _ ACG : print sys . argv [ 0 ] + ' - generate / decode FDX - B EM4x05 compliant IDs ' print ' \ tIf a single 16 HEX digit ID is provided , it will be decoded according to the FDX - B standard . ' print ' \ tMaximum value for country code is 999 according to the standard , but 4 digits will work . ' 