# # # # it under the terms of the GNU General Public License as published by # # card = rfidiot . card args = rfidiot . args # force card type if specified if card . select ( ) : if card . errorcode : print ' No card present ' # to a blank # # # # it under the terms of the GNU General Public License as published by # # card = rfidiot . card card . select ( ) print ' Reading : ' card . select ( ) for x in range ( 98 ) : if x = = 0 : if x > 0 : targettype = card . tagtype print ' Writing : ' for n in range ( x ) : print ' \ nWrite failed ! ' print ' \ n Verifying : ' for n in range ( x ) : print ' \ nVerify failed ! ' print ' No data ! ' # # # # it under the terms of the GNU General Public License as published by # # card = rfidiot . card args = rfidiot . args # # # # it under the terms of the GNU General Public License as published by # # card = rfidiot . card while address < 0xf0 : # # # # it under the terms of the GNU General Public License as published by # # card = rfidiot . card args = rfidiot . args help = rfidiot . help print " Decode : " print " Encode : " , print ' binary is ' , out # Q5 must be forced into Q5 mode to be sure of detection so try that first card . select ( ) if x = = ' N ' : if x = = ' Y ' : # data inverted # biphase print ' Q5 Control Block : ' , q5control = ' 6000F0E8 ' # control block for Hitag2 # Public Mode B # default password print ' Hitag2 Control Block : ' , print outhex [ x ] if writetag = = True : outhex [ 0 ] = q5control outhex [ 0 ] = h2control # it before trying to verify the write and switches mode so is now no longer in Q5 mode if x = = offset : print ' Done ! ' card . select ( ) print ' Write failed ! ' # confirmation of control block should be ok if x = = offset : print ' Done ! ' card . reset ( ) card . select ( ) 