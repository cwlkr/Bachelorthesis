card = rfidiot . card print " Couldn ' t open reader ! " os . _ exit ( True ) args = rfidiot . args card . info ( ' cardselect v0 . 1m ' ) if len ( args ) = = 1 : card . settagtype ( args [ 0 ] ) card . settagtype ( card . ALL ) if card . select ( ) : print ' Card ID : ' + card . uid print ' ATR : ' + card . pcsc _ atr if card . errorcode : print ' No card present ' os . _ exit ( True ) os . _ exit ( False ) card = rfidiot . card print " Couldn ' t open reader ! " os . _ exit ( True ) card . info ( ' copytag v0 . 1d ' ) card . select ( ) print ' \ nID : ' + card . uid print ' Reading : ' card . select ( ) for x in range ( 98 ) : if card . readblock ( x ) : sys . stdout . flush ( ) buffer . append ( card . data ) if x = = 0 : if x > 0 : print ' \ nRead % d blocks ' % x targettype = card . tagtype card . waitfortag ( ' Waiting for blank tag . . . ' ) print ' ID : ' + card . uid if card . tagtype ! = targettype : if not card . readblock ( 0 ) : os . _ exit ( False ) print ' Writing : ' for n in range ( x ) : sys . stdout . flush ( ) print ' \ nWrite failed ! ' print ' \ n Verifying : ' for n in range ( x ) : print ' \ nVerify failed ! ' os . _ exit ( True ) print ' OK \ r ' , sys . stdout . flush ( ) os . _ exit ( False ) print ' No data ! ' os . _ exit ( True ) card = rfidiot . card print " Couldn ' t open reader ! " os . _ exit ( False ) args = rfidiot . args print ' Setting ID to : ' + args [ 0 ] card = rfidiot . card print " Couldn ' t open reader ! " os . _ exit ( True ) card . info ( ' eeprom v0 . 1e ' ) while address < 0xf0 : card = rfidiot . card os . _ exit ( True ) args = rfidiot . args help = rfidiot . help card . info ( ' fdxbnum v0 . 1f ' ) print " Decode : " if len ( args [ 0 ] ) = = 16 : card . FDXBIDPrint ( args [ 0 ] ) if len ( args ) = = 2 : if args [ 1 ] = = ' WRITE ' : print ' Unrecognised option : ' + args [ 1 ] os . _ exit ( True ) os . _ exit ( False ) id = args [ 0 ] print " Encode : " , out = card . FDXBID128Bit ( id ) print ' binary is ' , out card . settagtype ( card . Q5 ) card . select ( ) if not card . tagtype = = card . Q5 : card . settagtype ( card . ALL ) card . waitfortag ( ' Waiting for blank tag . . . ' ) print ' Tag ID : ' + card . data if x = = ' N ' : os . _ exit ( False ) if x = = ' Y ' : print ' Q5 Control Block : ' , q5control = ' 6000F0E8 ' print outhex [ x / 4 + 1 ] print ' Hitag2 Control Block : ' , for x in range ( 1 , 5 , 1 ) : print outhex [ x ] if writetag = = True : if card . tagtype = = card . Q5 : outhex [ 0 ] = q5control if card . tagtype = = card . HITAG2 : outhex [ 0 ] = h2control print " Writing block % 02x : " % x , if x = = offset : print ' Done ! ' card . settagtype ( card . EM4x05 ) card . select ( ) print ' Card ID : ' + card . data print ' Write failed ! ' os . _ exit ( True ) if x = = offset : print ' Done ! ' card . reset ( ) card . settagtype ( card . EM4x05 ) card . select ( ) print ' Card ID : ' + card . data print outhex [ x - offset ] card . settagtype ( card . ALL ) os . _ exit ( False ) print ' \ tand a decimal National ID Number will generate a 16 HEX digit ID . ' print ' \ tIf the WRITE option is specified , a Q5 or Hitag2 will be programmed to emulate FDX - B . ' os . _ exit ( True ) 