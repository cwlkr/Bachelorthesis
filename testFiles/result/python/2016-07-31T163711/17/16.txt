if card . readertype = = card . READER _ PCSC : print ' ' + card . ISO7816ErrorCodes [ card . errorcode ] print ' Block % 02x : % s \ r ' % ( x , card . data ) , raw _ input ( ' Remove source tag and hit < CR > to continue . . . ' ) print ' Wrong blocksize ! ( % d / % d ) ' % ( len ( buffer [ 0 ] ) , len ( card . data ) ) , raw _ input ( ' Hit < CR > to continue . . . ' ) if string . upper ( raw _ input ( ' * * * Warning ! Data will be overwritten ! Continue ( y / n ) ? ' ) ) = = ' Y ' : print ' Block % 02x : % s \ r ' % ( n , buffer [ n ] ) , if not card . writeblock ( n , buffer [ n ] ) : print ' Block % 02x : % s ' % ( n , buffer [ n ] ) , if not card . readblock ( n ) or card . data ! = buffer [ n ] : print card . demotag ( card . DT _ SET _ UID , card . ToBinary ( args [ 0 ] ) ) print ' Station : \ t ' + card . station ( ) print ' Protocol : \ t ' + card . PCON ( ) print ' Protocol2 : \ t ' + card . PCON2 ( ) print ' Protocol3 : \ t ' + card . PCON3 ( ) print ' address % 02x : \ t % s ' % ( address , card . readEEPROM ( address ) ) card . FDXBIDPrint ( args [ 0 ] [ 1 : ] ) id = card . FDXBIDEncode ( args [ 0 ] , args [ 1 ] , args [ 2 ] ) if card . readertype = = card . READER _ ACG : if card . readertype = = card . READER _ ACG : if card . tagtype = = card . Q5 or card . tagtype = = card . HITAG2 : x = string . upper ( raw _ input ( ' * * * Warning ! This will overwrite TAG ! Proceed ( y / n ) ? ' ) ) x = raw _ input ( ' Incompatible TAG ! Hit < RETURN > to retry . . . ' ) for x in range ( 0 , len ( out ) , 8 ) : outbin + = chr ( int ( out [ x : x + 8 ] , 2 ) ) for x in range ( 0 , len ( outbin ) , 4 ) : outhex [ x / 4 + 1 ] = card . ToHex ( outbin [ x : x + 4 ] ) h2control = card . HITAG2 _ PUBLIC _ B + card . HITAG2 _ TRANSPORT _ TAG print ' Hitag2 Data Block % 02d : ' % ( x + 3 ) , if card . readertype = = card . READER _ ACG : print ' Control : ' + outhex [ x - offset ] if card . readertype = = card . READER _ FROSCH : print card . FROSCH _ Errors [ card . errorcode ] print ' Control : ' + outhex [ x - offset ] if card . readertype = = card . READER _ ACG : print ' Usage : ' + sys . argv [ 0 ] + ' [ OPTIONS ] < ID > [ WRITE ] | < APPID > < COUNTRY CODE > < NATIONAL ID > [ WRITE ] ' print ' \ tIf a single 16 HEX digit ID is provided , it will be decoded according to the FDX - B standard . ' print ' \ tNote : Application ID 8000 is \ ' Animal \ ' , and 0000 is non - Animal . ' print ' \ tMaximum value for country code is 999 according to the standard , but 4 digits will work . ' 