print " Couldn ' t open reader ! " os . _ exit ( True ) card . info ( ' cardselect v0 . 1m ' ) if len ( args ) = = 1 : card . settagtype ( args [ 0 ] ) card . settagtype ( card . ALL ) print ' Card ID : ' + card . uid if card . readertype = = card . READER _ PCSC : print ' ATR : ' + card . pcsc _ atr print ' ' + card . ISO7816ErrorCodes [ card . errorcode ] os . _ exit ( True ) os . _ exit ( False ) print " Couldn ' t open reader ! " os . _ exit ( True ) card . info ( ' copytag v0 . 1d ' ) print ' \ nID : ' + card . uid if card . readblock ( x ) : sys . stdout . flush ( ) buffer . append ( card . data ) print ' \ nRead % d blocks ' % x raw _ input ( ' Remove source tag and hit < CR > to continue . . . ' ) card . waitfortag ( ' Waiting for blank tag . . . ' ) print ' ID : ' + card . uid if card . tagtype ! = targettype : if not card . readblock ( 0 ) : raw _ input ( ' Hit < CR > to continue . . . ' ) os . _ exit ( False ) sys . stdout . flush ( ) if not card . writeblock ( n , buffer [ n ] ) : os . _ exit ( True ) print ' OK \ r ' , sys . stdout . flush ( ) os . _ exit ( False ) os . _ exit ( True ) print " Couldn ' t open reader ! " os . _ exit ( False ) print ' Setting ID to : ' + args [ 0 ] print " Couldn ' t open reader ! " os . _ exit ( True ) card . info ( ' eeprom v0 . 1e ' ) print ' Station : \ t ' + card . station ( ) print ' Protocol : \ t ' + card . PCON ( ) print ' Protocol2 : \ t ' + card . PCON2 ( ) print ' Protocol3 : \ t ' + card . PCON3 ( ) os . _ exit ( True ) card . info ( ' fdxbnum v0 . 1f ' ) if not help and ( len ( args ) = = 1 or len ( args ) = = 2 ) : if len ( args [ 0 ] ) = = 16 : card . FDXBIDPrint ( args [ 0 ] ) card . FDXBIDPrint ( args [ 0 ] [ 1 : ] ) if len ( args ) = = 2 : if args [ 1 ] = = ' WRITE ' : print ' Unrecognised option : ' + args [ 1 ] os . _ exit ( True ) os . _ exit ( False ) if not help and ( len ( args ) > = 3 or precoded ) : id = args [ 0 ] out = card . FDXBID128Bit ( id ) if ( len ( args ) = = 4 and args [ 3 ] = = ' WRITE ' ) or precoded : if card . readertype = = card . READER _ ACG : card . settagtype ( card . Q5 ) if card . readertype = = card . READER _ ACG : if not card . tagtype = = card . Q5 : card . settagtype ( card . ALL ) card . waitfortag ( ' Waiting for blank tag . . . ' ) print ' Tag ID : ' + card . data os . _ exit ( False ) # carrier 32 ( 2 * 15 + 2 ) for x in range ( 0 , len ( out ) , 8 ) : for x in range ( 0 , len ( outbin ) , 4 ) : print outhex [ x / 4 + 1 ] for x in range ( 1 , 5 , 1 ) : print ' Hitag2 Data Block % 02d : ' % ( x + 3 ) , if card . tagtype = = card . Q5 : if card . tagtype = = card . HITAG2 : if card . readertype = = card . READER _ ACG : print " Writing block % 02x : " % x , print ' Control : ' + outhex [ x - offset ] card . settagtype ( card . EM4x05 ) print ' Card ID : ' + card . data if card . readertype = = card . READER _ FROSCH : print card . FROSCH _ Errors [ card . errorcode ] os . _ exit ( True ) print ' Control : ' + outhex [ x - offset ] card . settagtype ( card . EM4x05 ) print ' Card ID : ' + card . data print outhex [ x - offset ] if card . readertype = = card . READER _ ACG : card . settagtype ( card . ALL ) os . _ exit ( False ) print ' \ tIf a single 16 HEX digit ID is provided , it will be decoded according to the FDX - B standard . ' print ' \ tAlternatively , specifying a 4 HEX digit Application ID , 3 or 4 digit decimal country code ' print ' \ t ( normally based on ISO - 3166 country codes or ICAR . ORG manufacturer codes , range 0 - 4095 ) ' print ' \ tand a decimal National ID Number will generate a 16 HEX digit ID . ' print ' \ tMaximum value for country code is 999 according to the standard , but 4 digits will work . ' print ' \ tIf the WRITE option is specified , a Q5 or Hitag2 will be programmed to emulate FDX - B . ' os . _ exit ( True ) 