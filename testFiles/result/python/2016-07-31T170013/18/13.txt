# ! / usr / bin / python os . _ exit ( True ) if len ( args ) = = 1 : if card . readertype = = card . READER _ PCSC : print ' ' + card . ISO7816ErrorCodes [ card . errorcode ] os . _ exit ( True ) os . _ exit ( False ) # ! / usr / bin / python os . _ exit ( True ) for x in range ( 98 ) : if card . readblock ( x ) : os . _ exit ( False ) for n in range ( x ) : for n in range ( x ) : os . _ exit ( True ) os . _ exit ( False ) os . _ exit ( True ) # ! / usr / bin / python os . _ exit ( False ) # ! / usr / bin / python os . _ exit ( True ) # ! / usr / bin / python # fdxbnum . py - generate / decode FDX - B EM4x05 compliant IDs os . _ exit ( True ) if len ( args [ 0 ] ) = = 16 : if len ( args ) = = 2 : if args [ 1 ] = = ' WRITE ' : os . _ exit ( True ) os . _ exit ( False ) if card . readertype = = card . READER _ ACG : if card . readertype = = card . READER _ ACG : os . _ exit ( False ) # rf / ? ( don ' t care ) - set to 00 print outhex [ x / 4 + 1 ] for x in range ( 1 , 5 , 1 ) : if card . tagtype = = card . Q5 : if card . tagtype = = card . HITAG2 : if card . readertype = = card . READER _ ACG : print " Writing block % 02x : " % x , if card . readertype = = card . READER _ FROSCH : print card . FROSCH _ Errors [ card . errorcode ] os . _ exit ( True ) print outhex [ x - offset ] if card . readertype = = card . READER _ ACG : os . _ exit ( False ) print sys . argv [ 0 ] + ' - generate / decode FDX - B EM4x05 compliant IDs ' os . _ exit ( True ) 