os . _ exit ( True ) if card . readertype = = card . READER _ PCSC : if card . errorcode : print ' ' + card . ISO7816ErrorCodes [ card . errorcode ] os . _ exit ( True ) os . _ exit ( False ) os . _ exit ( True ) if card . readblock ( x ) : if x = = 0 : if x > 0 : print ' \ nRead % d blocks ' % x if len ( card . data ) ! = len ( buffer [ 0 ] ) : os . _ exit ( False ) os . _ exit ( True ) os . _ exit ( False ) os . _ exit ( True ) os . _ exit ( False ) print card . demotag ( card . DT _ SET _ UID , card . ToBinary ( args [ 0 ] ) ) os . _ exit ( True ) while address < 0xf0 : # fdxbnum . py - generate / decode FDX - B EM4x05 compliant IDs os . _ exit ( True ) if not help and ( len ( args ) = = 1 or len ( args ) = = 2 ) : if len ( args [ 0 ] ) = = 16 : if args [ 1 ] = = ' WRITE ' : os . _ exit ( True ) os . _ exit ( False ) if not help and ( len ( args ) > = 3 or precoded ) : if card . readertype = = card . READER _ ACG : if card . readertype = = card . READER _ ACG : if card . tagtype = = card . Q5 or card . tagtype = = card . HITAG2 : os . _ exit ( False ) # rf / ? ( don ' t care ) - set to 00 q5control = ' 6000F0E8 ' for x in range ( 0 , len ( out ) , 8 ) : outbin + = chr ( int ( out [ x : x + 8 ] , 2 ) ) for x in range ( 0 , len ( outbin ) , 4 ) : print outhex [ x / 4 + 1 ] for x in range ( 1 , 5 , 1 ) : print outhex [ x ] if writetag = = True : if card . tagtype = = card . Q5 : if card . tagtype = = card . HITAG2 : if card . readertype = = card . READER _ ACG : for x in range ( 4 + offset , - 1 + offset , - 1 ) : print " Writing block % 02x : " % x , if x = = offset : if card . readertype = = card . READER _ FROSCH : print card . FROSCH _ Errors [ card . errorcode ] os . _ exit ( True ) if x = = offset : print outhex [ x - offset ] if card . readertype = = card . READER _ ACG : os . _ exit ( False ) print sys . argv [ 0 ] + ' - generate / decode FDX - B EM4x05 compliant IDs ' os . _ exit ( True ) 