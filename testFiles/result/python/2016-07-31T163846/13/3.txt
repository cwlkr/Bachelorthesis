# ! / usr / bin / python # cardselect . py - select card and display ID # http : / / rfidiot . org / os . _ exit ( True ) if len ( args ) = = 1 : if card . select ( ) : if card . errorcode : os . _ exit ( True ) os . _ exit ( False ) # ! / usr / bin / python # copytag . py - read all sectors from a standard tag and write them back # http : / / rfidiot . org / os . _ exit ( True ) print ' \ nID : ' + card . uid for x in range ( 98 ) : if card . readblock ( x ) : if x > 0 : print ' \ nRead % d blocks ' % x os . _ exit ( False ) for n in range ( x ) : for n in range ( x ) : os . _ exit ( True ) os . _ exit ( False ) os . _ exit ( True ) # ! / usr / bin / python # demotag . py - test IAIK TUG DemoTag # http : / / rfidiot . org / os . _ exit ( False ) # ! / usr / bin / python # eeprom . py - display reader ' s eeprom settings # http : / / rfidiot . org / os . _ exit ( True ) while address < 0xf0 : # ! / usr / bin / python # fdxbnum . py - generate / decode FDX - B EM4x05 compliant IDs # http : / / rfidiot . org / os . _ exit ( True ) if len ( args ) = = 2 : os . _ exit ( True ) os . _ exit ( False ) if x = = ' N ' : os . _ exit ( False ) if x = = ' Y ' : # rf / ? ( don ' t care ) - set to 00 q5control = ' 6000F0E8 ' print outhex [ x / 4 + 1 ] print outhex [ x ] print card . FROSCH _ Errors [ card . errorcode ] os . _ exit ( True ) print outhex [ x - offset ] os . _ exit ( False ) print ' \ tAlternatively , specifying a 4 HEX digit Application ID , 3 or 4 digit decimal country code ' print ' \ t ( normally based on ISO - 3166 country codes or ICAR . ORG manufacturer codes , range 0 - 4095 ) ' os . _ exit ( True ) 