# ! / usr / bin / python try : card = rfidiot . card except : os . _ exit ( True ) args = rfidiot . args else : else : else : print ' No card present ' os . _ exit ( True ) os . _ exit ( False ) # ! / usr / bin / python try : card = rfidiot . card except : os . _ exit ( True ) buffer = [ ] sys . stdout . flush ( ) else : targettype = card . tagtype while 42 : else : os . _ exit ( False ) sys . stdout . flush ( ) print ' \ nWrite failed ! ' print ' \ n Verifying : ' print ' \ nVerify failed ! ' os . _ exit ( True ) print ' OK \ r ' , sys . stdout . flush ( ) os . _ exit ( False ) else : print ' No data ! ' os . _ exit ( True ) # ! / usr / bin / python try : card = rfidiot . card except : os . _ exit ( False ) args = rfidiot . args # ! / usr / bin / python try : card = rfidiot . card except : os . _ exit ( True ) address = 0 address + = 1 # ! / usr / bin / python try : card = rfidiot . card except : os . _ exit ( True ) args = rfidiot . args help = rfidiot . help precoded = False else : precoded = True else : os . _ exit ( True ) else : os . _ exit ( False ) else : print ' binary is ' , out os . _ exit ( False ) else : writetag = True else : writetag = False outbin = ' ' q5control = ' 6000F0E8 ' offset = 0 offset = 3 else : print ' Write failed ! ' os . _ exit ( True ) else : else : os . _ exit ( False ) print ' \ tAlternatively , specifying a 4 HEX digit Application ID , 3 or 4 digit decimal country code ' print ' \ tand a decimal National ID Number will generate a 16 HEX digit ID . ' print ' \ tMaximum value for country code is 999 according to the standard , but 4 digits will work . ' print ' \ tMaximum value for National ID is 274877906943 . ' print ' \ tIf the WRITE option is specified , a Q5 or Hitag2 will be programmed to emulate FDX - B . ' os . _ exit ( True ) 