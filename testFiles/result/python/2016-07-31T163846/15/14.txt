# ! / usr / bin / python # http : / / rfidiot . org / os . _ exit ( True ) if len ( args ) = = 1 : if card . select ( ) : os . _ exit ( True ) os . _ exit ( False ) # ! / usr / bin / python # http : / / rfidiot . org / os . _ exit ( True ) for x in range ( 98 ) : if card . readblock ( x ) : print ' \ nRead % d blocks ' % x os . _ exit ( False ) for n in range ( x ) : for n in range ( x ) : os . _ exit ( True ) os . _ exit ( False ) os . _ exit ( True ) # ! / usr / bin / python # http : / / rfidiot . org / os . _ exit ( False ) # ! / usr / bin / python # http : / / rfidiot . org / os . _ exit ( True ) # ! / usr / bin / python # fdxbnum . py - generate / decode FDX - B EM4x05 compliant IDs # http : / / rfidiot . org / os . _ exit ( True ) if len ( args ) = = 2 : os . _ exit ( True ) os . _ exit ( False ) if x = = ' N ' : os . _ exit ( False ) if x = = ' Y ' : # rf / ? ( don ' t care ) - set to 00 print outhex [ x / 4 + 1 ] print " Writing block % 02x : " % x , print card . FROSCH _ Errors [ card . errorcode ] os . _ exit ( True ) print outhex [ x - offset ] os . _ exit ( False ) os . _ exit ( True ) 