# ! / usr / bin / python card = rfidiot . card os . _ exit ( True ) args = rfidiot . args print ' Card ID : ' + card . uid os . _ exit ( True ) os . _ exit ( False ) # ! / usr / bin / python card = rfidiot . card os . _ exit ( True ) card . select ( ) print ' \ nID : ' + card . uid print ' Reading : ' buffer = [ ] card . select ( ) print ' \ nRead % d blocks ' % x targettype = card . tagtype os . _ exit ( False ) print ' Writing : ' print ' \ nWrite failed ! ' print ' \ n Verifying : ' print ' \ nVerify failed ! ' os . _ exit ( True ) os . _ exit ( False ) print ' No data ! ' os . _ exit ( True ) # ! / usr / bin / python card = rfidiot . card os . _ exit ( False ) args = rfidiot . args # ! / usr / bin / python card = rfidiot . card os . _ exit ( True ) address = 0 address + = 1 # ! / usr / bin / python card = rfidiot . card os . _ exit ( True ) args = rfidiot . args help = rfidiot . help print " Decode : " os . _ exit ( True ) os . _ exit ( False ) print ' binary is ' , out card . select ( ) print ' Tag ID : ' + card . data os . _ exit ( False ) outbin = ' ' q5control = ' 6000F0E8 ' outhex [ 0 ] = q5control offset = 0 outhex [ 0 ] = h2control offset = 3 print ' Done ! ' card . select ( ) print ' Card ID : ' + card . data print ' Write failed ! ' os . _ exit ( True ) print ' Done ! ' card . reset ( ) card . select ( ) print ' Card ID : ' + card . data os . _ exit ( False ) print ' \ tIf a single 16 HEX digit ID is provided , it will be decoded according to the FDX - B standard . ' print ' \ tAlternatively , specifying a 4 HEX digit Application ID , 3 or 4 digit decimal country code ' print ' \ tand a decimal National ID Number will generate a 16 HEX digit ID . ' print ' \ tMaximum value for National ID is 274877906943 . ' os . _ exit ( True ) 