# http : / / rfidiot . org / if len ( args ) = = 1 : if card . select ( ) : print ' Card ID : ' + card . uid # http : / / rfidiot . org / print ' \ nID : ' + card . uid for x in range ( 98 ) : if card . readblock ( x ) : print ' Read error : ' , card . ISO7816ErrorCodes [ card . errorcode ] if len ( card . data ) ! = len ( buffer [ 0 ] ) : for n in range ( x ) : for n in range ( x ) : # http : / / rfidiot . org / # http : / / rfidiot . org / # fdxbnum . py - generate / decode FDX - B EM4x05 compliant IDs # http : / / rfidiot . org / if len ( args [ 0 ] ) = = 16 : if len ( args ) = = 2 : if args [ 1 ] = = ' WRITE ' : print ' Unrecognised option : ' + args [ 1 ] if not help and ( len ( args ) > = 3 or precoded ) : if not card . tagtype = = card . Q5 : print ' Tag ID : ' + card . data if x = = ' N ' : if x = = ' Y ' : # rf / ? ( don ' t care ) - set to 00 for x in range ( 0 , len ( out ) , 8 ) : for x in range ( 0 , len ( outbin ) , 4 ) : print outhex [ x / 4 + 1 ] for x in range ( 1 , 5 , 1 ) : print " Writing block % 02x : " % x , print ' Card ID : ' + card . data print card . FROSCH _ Errors [ card . errorcode ] print ' Card ID : ' + card . data print outhex [ x - offset ] print sys . argv [ 0 ] + ' - generate / decode FDX - B EM4x05 compliant IDs ' 