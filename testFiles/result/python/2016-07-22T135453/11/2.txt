# ! / usr / bin / python # http : / / rfidiot . org / os . _ exit ( True ) if len ( args ) = = 1 : if card . select ( ) : print ' Card ID : ' + card . uid if card . readertype = = card . READER _ PCSC : if card . errorcode : os . _ exit ( True ) os . _ exit ( False ) # ! / usr / bin / python # http : / / rfidiot . org / os . _ exit ( True ) print ' \ nID : ' + card . uid for x in range ( 98 ) : if card . readblock ( x ) : if x = = 0 : if x > 0 : print ' \ nRead % d blocks ' % x if card . tagtype ! = targettype : os . _ exit ( False ) for n in range ( x ) : print ' \ nWrite failed ! ' print ' \ n Verifying : ' for n in range ( x ) : print ' \ nVerify failed ! ' os . _ exit ( True ) os . _ exit ( False ) os . _ exit ( True ) # ! / usr / bin / python # http : / / rfidiot . org / os . _ exit ( False ) # ! / usr / bin / python # eeprom . py - display reader ' s eeprom settings # http : / / rfidiot . org / os . _ exit ( True ) while address < 0xf0 : # ! / usr / bin / python # fdxbnum . py - generate / decode FDX - B EM4x05 compliant IDs # http : / / rfidiot . org / os . _ exit ( True ) if len ( args [ 0 ] ) = = 16 : if len ( args ) = = 2 : if args [ 1 ] = = ' WRITE ' : print ' Unrecognised option : ' + args [ 1 ] os . _ exit ( True ) os . _ exit ( False ) if card . readertype = = card . READER _ ACG : if card . readertype = = card . READER _ ACG : print ' Tag ID : ' + card . data if x = = ' N ' : os . _ exit ( False ) if x = = ' Y ' : # rf / ? ( don ' t care ) - set to 00 q5control = ' 6000F0E8 ' print outhex [ x / 4 + 1 ] for x in range ( 1 , 5 , 1 ) : print outhex [ x ] if card . tagtype = = card . Q5 : if card . tagtype = = card . HITAG2 : if card . readertype = = card . READER _ ACG : print " Writing block % 02x : " % x , print ' Card ID : ' + card . data if card . readertype = = card . READER _ FROSCH : print card . FROSCH _ Errors [ card . errorcode ] os . _ exit ( True ) print ' Card ID : ' + card . data print outhex [ x - offset ] if card . readertype = = card . READER _ ACG : os . _ exit ( False ) print sys . argv [ 0 ] + ' - generate / decode FDX - B EM4x05 compliant IDs ' print ' \ tAlternatively , specifying a 4 HEX digit Application ID , 3 or 4 digit decimal country code ' print ' \ t ( normally based on ISO - 3166 country codes or ICAR . ORG manufacturer codes , range 0 - 4095 ) ' os . _ exit ( True ) 