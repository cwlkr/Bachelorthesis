* This class works the CriteriaMatcher Algoritm and ensures * Matches a Set of criteria to each { @ link Menu } of the current day and returns a * List of { @ link Criteria } objects . The List contains a Criteria object for each * matching criteria of the criteriaSet . The Algorithm also fills this * Criteria object with all the Menus the String is matching and the mensas * this Menu is served in . If criteriaSet or mensas are empty , an empty list is returned . * Is either criteriaSet or mensas are null a { @ link NullPointerException } may be thrown . * String set of criterias you want to match with . * List of { @ link Mensa } s you want to match the criterias with . * mensa in which the menu is served in . if ( ( menu . getDescription ( ) . toLowerCase ( Locale . getDefault ( ) ) ) . contains ( criteria if ( ! container . contains ( crit ) ) if ( ! crit . getMap ( ) . containsKey ( menu ) ) { * Receives BootUpComplete Broadcast and sets an { @ link AlarmManager } with * an Intent for the { @ link AlarmReceiver } . Its actions depend on the * predefined values made in the Settings , if there are now settings made , * it does nothing else it sets an daily repeating AlarmManager , starting mensaListView = ( ListView ) this . findViewById ( R . id . mensa _ list ) ; * This simple abstract class has the functionality which is common for both * Invited and Sent Invites Fragment . invitedList = ( ListView ) view . findViewById ( R . id . invited _ list ) ; * changes the progressbar in the ActionBar back to not loading * Listener which sets the viability of a view from visible to gone and vice versa * This activity is just used as a callback for the push notifications . It * starts the normal app and opens it at the invited tab . 