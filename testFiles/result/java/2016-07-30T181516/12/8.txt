* This class works the CriteriaMatcher Algoritm and ensures container = new ArrayList < Criteria > ( ) ; temp = new ArrayList < Mensa > ( ) ; * Matches a Set of criteria to each { @ link Menu } of the current day and returns a * List of { @ link Criteria } objects . The List contains a Criteria object for each * matching criteria of the criteriaSet . The Algorithm also fills this * Criteria object with all the Menus the String is matching and the mensas * this Menu is served in . If criteriaSet or mensas are empty , an empty list is returned . * Is either criteriaSet or mensas are null a { @ link NullPointerException } may be thrown . * String set of criterias you want to match with . * List of { @ link Mensa } s you want to match the criterias with . * mensa in which the menu is served in . for ( String criteria : criteriaSet ) { crit . setCriteriaName ( criteria ) ; for ( Mensa mensa : mensas ) { if ( daily ! = null ) { for ( Menu menu : daily . getMenus ( ) ) { if ( ( menu . getDescription ( ) . toLowerCase ( Locale . getDefault ( ) ) ) . contains ( criteria . toLowerCase ( Locale . getDefault ( ) ) ) ) { if ( ! container . contains ( crit ) ) container . add ( crit ) ; if ( ! crit . getMap ( ) . containsKey ( menu ) ) { temp = new ArrayList < Mensa > ( ) ; temp . add ( mensa ) ; crit . getMap ( ) . put ( menu , temp ) ; temp = new ArrayList < Mensa > ( ) ; temp = crit . getMap ( ) . get ( menu ) ; temp . add ( mensa ) ; * Receives BootUpComplete Broadcast and sets an { @ link AlarmManager } with * an Intent for the { @ link AlarmReceiver } . Its actions depend on the * predefined values made in the Settings , if there are now settings made , * it does nothing else it sets an daily repeating AlarmManager , starting * the AlarmReceiver . if ( pref . getDoNotification ( ) ) { tenOClock . set ( Calendar . YEAR , Calendar . MONTH , Calendar . DAY _ OF _ MONTH , 10 , 0 , 0 ) ; PendingIntent . FLAG _ CANCEL _ CURRENT ) ; alarm . setInexactRepeating ( AlarmManager . RTC , tenOClock . getTimeInMillis ( ) , AlarmManager . INTERVAL _ DAY , operation ) ; super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity _ main ) ; mensaListAdapter = new ArrayAdapter < Mensa > ( this , android . R . layout . simple _ list _ item _ 1 ) ; mensaListView = ( ListView ) this . findViewById ( R . id . mensa _ list ) ; mensaListView . setAdapter ( mensaListAdapter ) ; Toast . makeText ( Main . this , MESSAGE _ GET _ DATA , Toast . LENGTH _ SHORT ) . show ( ) ; mensaListView . setOnItemClickListener ( new OnItemClickListener ( ) { intent . putExtra ( MENSA _ ID _ KEY , mensa . getId ( ) ) ; intent . putExtra ( MENSA _ NAME _ KEY , mensa . getName ( ) ) ; Main . this . startActivity ( intent ) ; * This simple abstract class has the functionality which is common for both * Invited and Sent Invites Fragment . adapter = createAdapter ( ) ; invitedList = ( ListView ) view . findViewById ( R . id . invited _ list ) ; setUpEmptyView ( view ) ; invitedList . setAdapter ( adapter ) ; setHasOptionsMenu ( true ) ; if ( LoginService . isLoggedIn ( ) ) showMessage . setText ( R . string . no _ invites ) ; showMessage . setText ( R . string . not _ loged _ in ) ; invitedList . setEmptyView ( showMessage ) ; if ( LoginService . isLoggedIn ( ) ) inflater . inflate ( R . menu . invitations _ menu , menu ) ; switch ( item . getItemId ( ) ) { SocialManager . getInstance ( ) . loadInvites ( ) ; menuItem = item ; menuItem . setActionView ( R . layout . progress _ bar ) ; menuItem . expandActionView ( ) ; Toast . makeText ( getActivity ( ) , R . string . toast _ refreshing _ msg , Toast . LENGTH _ SHORT ) . show ( ) ; super . onDestroy ( ) ; SocialManager . getInstance ( ) . removeObserver ( adapter ) ; * changes the progressbar in the ActionBar back to not loading if ( menuItem ! = null ) { menuItem . collapseActionView ( ) ; menuItem . setActionView ( null ) ; * Listener which sets the viability of a view from visible to gone and vice versa this . toToggle = toToggle ; this . ctx = ctx ; if ( toToggle . isShown ( ) ) { ToggleAnimation . slide _ up ( ctx , toToggle ) ; toToggle . setVisibility ( View . GONE ) ; ToggleAnimation . slide _ down ( ctx , toToggle ) ; toToggle . setVisibility ( View . VISIBLE ) ; * This activity is just used as a callback for the push notifications . It * starts the normal app and opens it at the invited tab . super . onCreate ( savedInstanceState ) ; intent . putExtra ( SHOW _ INVITES , true ) ; intent . setFlags ( Intent . FLAG _ ACTIVITY _ SINGLE _ TOP | Intent . FLAG _ ACTIVITY _ CLEAR _ TOP ) ; startActivity ( intent ) ; 