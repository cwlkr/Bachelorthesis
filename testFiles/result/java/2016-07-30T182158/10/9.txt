import com . ese2013 . mub . model . DailyMenuplan ; import com . ese2013 . mub . model . Day ; import com . ese2013 . mub . model . Mensa ; import com . ese2013 . mub . model . Menu ; import com . ese2013 . mub . model . WeeklyMenuplan ; * This class works the CriteriaMatcher Algoritm and ensures * Matches a Set of criteria to each { @ link Menu } of the current day and returns a * List of { @ link Criteria } objects . The List contains a Criteria object for each * matching criteria of the criteriaSet . The Algorithm also fills this * Criteria object with all the Menus the String is matching and the mensas * this Menu is served in . If criteriaSet or mensas are empty , an empty list is returned . * Is either criteriaSet or mensas are null a { @ link NullPointerException } may be thrown . * String set of criterias you want to match with . * List of { @ link Mensa } s you want to match the criterias with . * @ return List of Criteria Objects which stores the matching menus and the * mensa in which the menu is served in . public List < Criteria > match ( Set < String > criteriaSet , List < Mensa > mensas ) { DailyMenuplan daily = weekly . getDailymenuplan ( Day . today ( ) ) ; for ( Menu menu : daily . getMenus ( ) ) { if ( ( menu . getDescription ( ) . toLowerCase ( Locale . getDefault ( ) ) ) . contains ( criteria . toLowerCase ( Locale . getDefault ( ) ) ) ) { if ( ! crit . getMap ( ) . containsKey ( menu ) ) { crit . getMap ( ) . put ( menu , temp ) ; temp = crit . getMap ( ) . get ( menu ) ; import com . ese2013 . mub . util . SharedPrefsHandler ; * an Intent for the { @ link AlarmReceiver } . Its actions depend on the * predefined values made in the Settings , if there are now settings made , * it does nothing else it sets an daily repeating AlarmManager , starting public void onReceive ( Context context , Intent intent ) { Calendar tenOClock = Calendar . getInstance ( Locale . getDefault ( ) ) ; tenOClock . set ( Calendar . YEAR , Calendar . MONTH , Calendar . DAY _ OF _ MONTH , 10 , 0 , 0 ) ; AlarmManager alarm = ( AlarmManager ) context . getSystemService ( Context . ALARM _ SERVICE ) ; PendingIntent operation = PendingIntent . getBroadcast ( context , 0 , new Intent ( context , AlarmReceiver . class ) , alarm . setInexactRepeating ( AlarmManager . RTC , tenOClock . getTimeInMillis ( ) , AlarmManager . INTERVAL _ DAY , import ch . xonix . mensa . unibe . model . Mensa ; import ch . xonix . mensa . unibe . request . MensasRequest ; private static final CharSequence MESSAGE _ GET _ DATA = " lade . . . " ; protected static final String MENSA _ ID _ KEY = " ch . xonix . mensa . unibe : : mensa _ ID " ; protected static final String MENSA _ NAME _ KEY = " ch . xonix . mensa . unibe : : mensa _ name " ; setContentView ( R . layout . activity _ main ) ; android . R . layout . simple _ list _ item _ 1 ) ; mensaListView = ( ListView ) this . findViewById ( R . id . mensa _ list ) ; / / make aysnc request to get a list of all canteens Toast . makeText ( Main . this , MESSAGE _ GET _ DATA , Toast . LENGTH _ SHORT ) . show ( ) ; public void onItemClick ( AdapterView < ? > parent , View view , int pos , Mensa mensa = ( Mensa ) parent . getItemAtPosition ( pos ) ; Intent intent = new Intent ( Main . this , MenuplanActivity . class ) ; intent . putExtra ( MENSA _ ID _ KEY , mensa . getId ( ) ) ; intent . putExtra ( MENSA _ NAME _ KEY , mensa . getName ( ) ) ; / / Inflate the menu ; this adds items to the action bar if it is present . / / getMenuInflater ( ) . inflate ( R . menu . main , menu ) ; import com . ese2013 . mub . social . LoginService ; import com . ese2013 . mub . social . SocialManager ; import android . support . v4 . app . Fragment ; * This simple abstract class has the functionality which is common for both public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment _ invited , null ) ; invitedList = ( ListView ) view . findViewById ( R . id . invited _ list ) ; TextView showMessage = ( TextView ) view . findViewById ( R . id . show _ message ) ; showMessage . setText ( R . string . no _ invites ) ; showMessage . setText ( R . string . not _ loged _ in ) ; public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . invitations _ menu , menu ) ; case R . id . new _ invite _ button : ( ( DrawerMenuActivity ) getActivity ( ) ) . createInvitation ( ) ; menuItem . setActionView ( R . layout . progress _ bar ) ; Toast . makeText ( getActivity ( ) , R . string . toast _ refreshing _ msg , Toast . LENGTH _ SHORT ) . show ( ) ; SocialManager . getInstance ( ) . removeObserver ( adapter ) ; * changes the progressbar in the ActionBar back to not loading * Listener which sets the viability of a view from visible to gone and vice versa ToggleAnimation . slide _ up ( ctx , toToggle ) ; ToggleAnimation . slide _ down ( ctx , toToggle ) ; * This activity is just used as a callback for the push notifications . It * starts the normal app and opens it at the invited tab . public static final String SHOW _ INVITES = " showInvites " ; Intent intent = new Intent ( this , DrawerMenuActivity . class ) ; intent . putExtra ( SHOW _ INVITES , true ) ; intent . setFlags ( Intent . FLAG _ ACTIVITY _ SINGLE _ TOP | Intent . FLAG _ ACTIVITY _ CLEAR _ TOP ) ; 