private static global : : System . Resources . ResourceManager resourceMan ; private static global : : System . Globalization . CultureInfo resourceCulture ; internal static global : : System . Resources . ResourceManager ResourceManager { if ( object . ReferenceEquals ( resourceMan , null ) ) { internal static global : : System . Globalization . CultureInfo Culture { return ResourceManager . GetString ( " AccessScopeExceedsGrantScope " , resourceCulture ) ; return ResourceManager . GetString ( " AccessTokenSigningKeyMissing " , resourceCulture ) ; return ResourceManager . GetString ( " ClientCallbackDisallowed " , resourceCulture ) ; return ResourceManager . GetString ( " ClientOrTokenSecretNotFound " , resourceCulture ) ; return ResourceManager . GetString ( " ClientSecretMismatch " , resourceCulture ) ; return ResourceManager . GetString ( " InvalidResourceOwnerPasswordCredential " , resourceCulture ) ; return ResourceManager . GetString ( " NoCallback " , resourceCulture ) ; private static global : : System . Resources . ResourceManager resourceMan ; private static global : : System . Globalization . CultureInfo resourceCulture ; internal static global : : System . Resources . ResourceManager ResourceManager { if ( object . ReferenceEquals ( resourceMan , null ) ) { internal static global : : System . Globalization . CultureInfo Culture { return ResourceManager . GetString ( " AccessScopeExceedsGrantScope " , resourceCulture ) ; return ResourceManager . GetString ( " AccessTokenSigningKeyMissing " , resourceCulture ) ; return ResourceManager . GetString ( " ClientCallbackDisallowed " , resourceCulture ) ; return ResourceManager . GetString ( " ClientOrTokenSecretNotFound " , resourceCulture ) ; return ResourceManager . GetString ( " ClientSecretMismatch " , resourceCulture ) ; return ResourceManager . GetString ( " InvalidResourceOwnerPasswordCredential " , resourceCulture ) ; return ResourceManager . GetString ( " NoCallback " , resourceCulture ) ; Requires . NotNullOrEmpty ( secret , " secret " ) ; Requires . NotNull ( defaultCallback , " defaultCallback " ) ; this . ClientType = ClientType . Confidential ; Requires . NotNull ( defaultCallback , " defaultCallback " ) ; this . ClientType = ClientType . Public ; Requires . NotNullOrEmpty ( secret , " secret " ) ; return MessagingUtilities . EqualsConstantTime ( secret , this . secret ) ; 