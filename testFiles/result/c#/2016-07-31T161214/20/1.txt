namespace DotNetOpenAuth . OAuth2 { private static global : : System . Resources . ResourceManager resourceMan ; private static global : : System . Globalization . CultureInfo resourceCulture ; internal static global : : System . Resources . ResourceManager ResourceManager { if ( object . ReferenceEquals ( resourceMan , null ) ) { global : : System . Resources . ResourceManager temp = new global : : System . Resources . ResourceManager ( " DotNetOpenAuth . OAuth2 . AuthServerStrings " , typeof ( AuthServerStrings ) . Assembly ) ; resourceMan = temp ; internal static global : : System . Globalization . CultureInfo Culture { resourceCulture = value ; return ResourceManager . GetString ( " AccessScopeExceedsGrantScope " , resourceCulture ) ; return ResourceManager . GetString ( " AccessTokenSigningKeyMissing " , resourceCulture ) ; return ResourceManager . GetString ( " ClientCallbackDisallowed " , resourceCulture ) ; return ResourceManager . GetString ( " ClientOrTokenSecretNotFound " , resourceCulture ) ; return ResourceManager . GetString ( " ClientSecretMismatch " , resourceCulture ) ; return ResourceManager . GetString ( " InvalidResourceOwnerPasswordCredential " , resourceCulture ) ; return ResourceManager . GetString ( " NoCallback " , resourceCulture ) ; namespace DotNetOpenAuth . OAuth2 { private static global : : System . Resources . ResourceManager resourceMan ; private static global : : System . Globalization . CultureInfo resourceCulture ; internal static global : : System . Resources . ResourceManager ResourceManager { if ( object . ReferenceEquals ( resourceMan , null ) ) { global : : System . Resources . ResourceManager temp = new global : : System . Resources . ResourceManager ( " DotNetOpenAuth . OAuth2 . AuthServerStrings " , typeof ( AuthServerStrings ) . Assembly ) ; resourceMan = temp ; internal static global : : System . Globalization . CultureInfo Culture { resourceCulture = value ; return ResourceManager . GetString ( " AccessScopeExceedsGrantScope " , resourceCulture ) ; return ResourceManager . GetString ( " AccessTokenSigningKeyMissing " , resourceCulture ) ; return ResourceManager . GetString ( " ClientCallbackDisallowed " , resourceCulture ) ; return ResourceManager . GetString ( " ClientOrTokenSecretNotFound " , resourceCulture ) ; return ResourceManager . GetString ( " ClientSecretMismatch " , resourceCulture ) ; return ResourceManager . GetString ( " InvalidResourceOwnerPasswordCredential " , resourceCulture ) ; return ResourceManager . GetString ( " NoCallback " , resourceCulture ) ; namespace DotNetOpenAuth . OAuth2 { using System . Collections . Generic ; using System . Linq ; using System . Text ; using DotNetOpenAuth . Messaging ; public class ClientDescription : IClientDescription { public ClientDescription ( string secret , Uri defaultCallback ) { Requires . NotNullOrEmpty ( secret , " secret " ) ; Requires . NotNull ( defaultCallback , " defaultCallback " ) ; this . secret = secret ; this . DefaultCallback = defaultCallback ; this . ClientType = ClientType . Confidential ; public ClientDescription ( Uri defaultCallback ) { Requires . NotNull ( defaultCallback , " defaultCallback " ) ; this . DefaultCallback = defaultCallback ; this . ClientType = ClientType . Public ; public Uri DefaultCallback { get ; protected set ; } public ClientType ClientType { get ; protected set ; } get { return ! string . IsNullOrEmpty ( this . secret ) ; } public virtual bool IsCallbackAllowed ( Uri callback ) { return EqualityComparer < Uri > . Default . Equals ( this . DefaultCallback , callback ) ; public virtual bool IsValidClientSecret ( string secret ) { Requires . NotNullOrEmpty ( secret , " secret " ) ; return MessagingUtilities . EqualsConstantTime ( secret , this . secret ) ; 