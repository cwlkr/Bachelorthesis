" 64 - bit Windows and Linux they are of different width . In worst case you end up casting 64 - bit address down "
" and Linux they are of different width . In worst case you end up casting 64 - bit integer down to 32 - bit pointer . " 
" Assigning a pointer to an integer ( int / long / etc ) is not portable across different platforms and " 
" Assigning a pointer to an integer is not portable . \ n " 
" Assigning an integer ( int / long / etc ) to a pointer is not portable across different platforms and " 
" Assigning an integer to a pointer is not portable . \ n " 
" AssignmentAddressToInteger " , 
" CastAddressToIntegerAtReturn " , 
" CastIntegerToAddressAtReturn " ,
 * This program is distributed in the hope that it will be useful , 
" compilers . For example in 32 - bit Windows and linux they are same width , but in 64 - bit Windows and linux " 
" different platforms and compilers . For example in 32 - bit Windows and Linux they are same width , but in " 
" platforms and compilers . For example in 32 - bit Windows and Linux they are same width , but in 64 - bit Windows "
" Returning an address value in a function with integer ( int / long / etc ) return type is not portable across " 
" Returning an address value in a function with integer return type is not portable . \ n " 
" Returning an integer ( int / long / etc ) in a function with pointer return type is not portable across different "
" Returning an integer in a function with pointer return type is not portable . \ n " 
" The safe way is to always return a pointer . " , CWE758 , false ) ; 
" they are of different width . In worst case you end up assigning 64 - bit address to 32 - bit integer . The safe " 
" to 32 - bit integer . The safe way is to always return an integer . " , CWE758 , false ) ; 
" way is to store addresses only in pointer types ( or typedefs like uintptr _ t ) . " , CWE758 , false ) ;
* 
* ( at your option ) any later version . 
* / 
* along with this program . If not , see < http : / / www . gnu . org / licenses / > . 
* but WITHOUT ANY WARRANTY ; without even the implied warranty of 
* Copyright ( C ) 2007 - 2016 Cppcheck team .
* Cppcheck - A tool for static C / C + + code analysis 
* GNU General Public License for more details . 
* it under the terms of the GNU General Public License as published by 
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the 
* the Free Software Foundation , either version 3 of the License , or 
* This program is distributed in the hope that it will be useful , 
* This program is free software : you can redistribute it and / or modify 
* You should have received a copy of the GNU General Public License 
/ * 
